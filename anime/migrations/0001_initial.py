# Generated by Django 4.2.7 on 2023-11-22 01:15

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Anime',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=100)),
                ('sinopse', models.TextField(max_length=1000)),
                ('classificacao', models.IntegerField(choices=[(10, 10), (12, 12), (14, 14), (16, 16), (18, 18)])),
                ('distribuidora', models.CharField(max_length=50)),
                ('thumb', models.ImageField(upload_to='thumb_animes')),
                ('tipo', models.CharField(choices=[('LEGENDADO', 'Legendado'), ('DUBLADO', 'Dublado')], max_length=10)),
                ('temporada', models.CharField(choices=[('INVERNO', 'Inverno'), ('PRIMAVERA', 'Primavera'), ('VERAO', 'Verão'), ('OUTONO', 'Outono')], max_length=10)),
                ('visualizacoes', models.IntegerField(default=0)),
                ('data_criacao', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Genero',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('generos', models.CharField(choices=[('ACAO', 'Ação'), ('ARTES_MARCIAIS', 'Artes Marciais'), ('AVENTURA', 'Aventura'), ('COMEDIA', 'Comédia'), ('DEMONIOS', 'Demônios'), ('DRAMA', 'Drama'), ('ECCHI', 'Ecchi'), ('ESCOLAR', 'Escolar'), ('ESPORTES', 'Esportes'), ('FANTASIA', 'Fantasia'), ('FICCAO_CIENTIFICA', 'Ficção Científica'), ('HAREM', 'Harém'), ('HISTORICO', 'Histórico'), ('HORROR', 'Horror'), ('JOGO', 'Jogo'), ('LIGHT_NOVEL', 'Light Novel'), ('MAGIA', 'Magia'), ('MECHA', 'Mecha'), ('MILITAR', 'Militar'), ('MISTERIO', 'Mistério'), ('MUSICAL', 'Musical'), ('ROMANCE', 'Romance'), ('SAMURAI', 'Samurai'), ('SEINEN', 'Seinen'), ('SEM_CENSURA', 'Sem Censura'), ('SHOUJO', 'Shoujo'), ('SHOUNEN', 'Shounen'), ('SLICE_OF_LIFE', 'Slice of Life'), ('SOBRENATURAL', 'Sobrenatural'), ('SUPER_PODERES', 'Super Poderes'), ('SUSPENSE', 'Suspense'), ('TERROR', 'Terror'), ('YAOI', 'Yaoi'), ('YURI', 'Yuri')], max_length=18)),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='generos', to='anime.anime')),
            ],
        ),
        migrations.CreateModel(
            name='Episodio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=100)),
                ('video', models.URLField()),
                ('data_criacao', models.DateTimeField(default=django.utils.timezone.now)),
                ('thumb_episodio', models.ImageField(default='default_thumb.jpg', upload_to='thumb_episodios')),
                ('anime', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='episodios', to='anime.anime')),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('animes_vistos', models.ManyToManyField(related_name='animes_vistos', to='anime.anime')),
                ('assistir_depois', models.ManyToManyField(related_name='assistir_depois', to='anime.anime')),
                ('episodios_vistos', models.ManyToManyField(to='anime.episodio')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
